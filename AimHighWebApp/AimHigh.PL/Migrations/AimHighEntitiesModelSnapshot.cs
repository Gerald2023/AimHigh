// <auto-generated />
using System;
using AimHigh.PL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AimHigh.PL.Migrations
{
    [DbContext(typeof(AimHighEntities))]
    partial class AimHighEntitiesModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AimHigh.PL.Entities.tblGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Progress")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_tblGoal_Id");

                    b.HasIndex("UserId");

                    b.ToTable("tblGoal", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5e664c3-c364-4adf-afef-40f27147d333"),
                            Date = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete online courses and build projects to learn ASP.NET Core.",
                            ImagePath = "learn_aspnet_core.jpg",
                            Progress = 0.0,
                            Title = "Learn ASP.NET Core",
                            UserId = new Guid("3a56a3b1-5848-4133-a2ef-385fe2ae1afe")
                        },
                        new
                        {
                            Id = new Guid("f9473dd6-87bc-4741-835b-734b8f59e885"),
                            Date = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Read a variety of books across different genres.",
                            ImagePath = "read_books.jpg",
                            Progress = 0.0,
                            Title = "Read 20 Books",
                            UserId = new Guid("e7630838-876f-4bce-8cf2-12dfadff3a64")
                        });
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblMilestone", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_tblMilestone_Id");

                    b.HasIndex("GoalId");

                    b.ToTable("tblMilestone", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f86dafa-9f65-4348-ab88-3489d80dc95a"),
                            Date = new DateTime(2024, 8, 20, 15, 40, 7, 542, DateTimeKind.Local).AddTicks(6778),
                            Description = "Finish the first online course.",
                            GoalId = new Guid("f5e664c3-c364-4adf-afef-40f27147d333"),
                            Status = "Pending",
                            Title = "Complete Course 1"
                        },
                        new
                        {
                            Id = new Guid("ff447617-821a-41d0-9e14-ba0f4123b1d0"),
                            Date = new DateTime(2024, 9, 19, 15, 40, 7, 542, DateTimeKind.Local).AddTicks(6842),
                            Description = "Finish the second online course.",
                            GoalId = new Guid("f9473dd6-87bc-4741-835b-734b8f59e885"),
                            Status = "Pending",
                            Title = "Complete Course 2"
                        });
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_tblTag_Id");

                    b.ToTable("tblTag", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6eee8666-1c77-4739-a7be-08618c6b6413"),
                            Description = "Personal"
                        },
                        new
                        {
                            Id = new Guid("11fde2c8-3590-4cd1-af8e-6b53bee7d2d8"),
                            Description = "Professional"
                        });
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_tblTask_Id");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("tblTask", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea46a0ca-4d73-403a-a01e-3e50860ffb12"),
                            Date = new DateTime(2024, 7, 28, 15, 40, 7, 543, DateTimeKind.Local).AddTicks(546),
                            Description = "Read and complete exercises in Chapter 1 of the textbook.",
                            MilestoneId = new Guid("1f86dafa-9f65-4348-ab88-3489d80dc95a"),
                            TagId = new Guid("6eee8666-1c77-4739-a7be-08618c6b6413"),
                            Title = "Complete Chapter 1",
                            UserId = new Guid("3a56a3b1-5848-4133-a2ef-385fe2ae1afe")
                        },
                        new
                        {
                            Id = new Guid("0035ecf0-019c-4fad-835a-cd0a0588f69e"),
                            Date = new DateTime(2024, 8, 4, 15, 40, 7, 543, DateTimeKind.Local).AddTicks(585),
                            Description = "Write a review of the latest book read.",
                            MilestoneId = new Guid("ff447617-821a-41d0-9e14-ba0f4123b1d0"),
                            TagId = new Guid("11fde2c8-3590-4cd1-af8e-6b53bee7d2d8"),
                            Title = "Write Book Review",
                            UserId = new Guid("e7630838-876f-4bce-8cf2-12dfadff3a64")
                        });
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(28)
                        .IsUnicode(false)
                        .HasColumnType("varchar(28)");

                    b.HasKey("Id")
                        .HasName("PK_tblUser_Id");

                    b.ToTable("tblUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a56a3b1-5848-4133-a2ef-385fe2ae1afe"),
                            Email = "smarin@sample.com",
                            FirstName = "Steve",
                            LastName = "Marin",
                            Password = "pYfdnNb8sO0FgS4H0MRSwLGOIME="
                        },
                        new
                        {
                            Id = new Guid("e7630838-876f-4bce-8cf2-12dfadff3a64"),
                            Email = "Gerald@sample.com",
                            FirstName = "Gerald",
                            LastName = "Vallejos",
                            Password = "pYfdnNb8sO0FgS4H0MRSwLGOIME="
                        });
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblGoal", b =>
                {
                    b.HasOne("AimHigh.PL.Entities.tblUser", "User")
                        .WithMany("tblGoals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblGoal_tblUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblMilestone", b =>
                {
                    b.HasOne("AimHigh.PL.Entities.tblGoal", "Goal")
                        .WithMany("tblMilestones")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblMilestone_tblGoal");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblTask", b =>
                {
                    b.HasOne("AimHigh.PL.Entities.tblMilestone", "Milestone")
                        .WithMany("tblTasks")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblTask_tblMilestone");

                    b.HasOne("AimHigh.PL.Entities.tblTag", "Tag")
                        .WithMany("tblTasks")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AimHigh.PL.Entities.tblUser", "User")
                        .WithMany("tblTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_tblTask_tblUser");

                    b.Navigation("Milestone");

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblGoal", b =>
                {
                    b.Navigation("tblMilestones");
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblMilestone", b =>
                {
                    b.Navigation("tblTasks");
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblTag", b =>
                {
                    b.Navigation("tblTasks");
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblUser", b =>
                {
                    b.Navigation("tblGoals");

                    b.Navigation("tblTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
