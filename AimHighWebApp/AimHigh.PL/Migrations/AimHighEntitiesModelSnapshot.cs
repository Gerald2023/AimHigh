// <auto-generated />
using System;
using AimHigh.PL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AimHigh.PL.Migrations
{
    [DbContext(typeof(AimHighEntities))]
    partial class AimHighEntitiesModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AimHigh.PL.Entities.tblGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Progress")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_tblGoal_Id");

                    b.HasIndex("UserId");

                    b.ToTable("tblGoal", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1263c644-ec61-414e-955b-63af879da171"),
                            Date = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete online courses and build projects to learn ASP.NET Core.",
                            ImagePath = "learn_aspnet_core.jpg",
                            Progress = 0.0,
                            Title = "Learn ASP.NET Core",
                            UserId = new Guid("50f69577-1294-4f71-8d6f-f9bbefe61362")
                        },
                        new
                        {
                            Id = new Guid("23d82fe9-3ce6-43e7-9e45-44af7f89e04c"),
                            Date = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Read a variety of books across different genres.",
                            ImagePath = "read_books.jpg",
                            Progress = 0.0,
                            Title = "Read 20 Books",
                            UserId = new Guid("6631f186-d6ed-4cd2-a7d4-2d6bcc35f714")
                        });
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblMilestone", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_tblMilestone_Id");

                    b.HasIndex("GoalId");

                    b.ToTable("tblMilestone", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("62ea32fe-999a-4fcb-b1b2-2085d0d771ed"),
                            Date = new DateTime(2025, 2, 2, 15, 31, 15, 739, DateTimeKind.Local).AddTicks(2740),
                            Description = "Finish the first online course.",
                            GoalId = new Guid("1263c644-ec61-414e-955b-63af879da171"),
                            Status = "Pending",
                            Title = "Complete Course 1"
                        },
                        new
                        {
                            Id = new Guid("389e02b4-7cac-48e7-a184-153f67939b45"),
                            Date = new DateTime(2025, 3, 4, 15, 31, 15, 739, DateTimeKind.Local).AddTicks(2805),
                            Description = "Finish the second online course.",
                            GoalId = new Guid("23d82fe9-3ce6-43e7-9e45-44af7f89e04c"),
                            Status = "Pending",
                            Title = "Complete Course 2"
                        });
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_tblTag_Id");

                    b.ToTable("tblTag", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5156f3ff-3c74-49d1-b31d-721a95904a8a"),
                            Description = "Personal"
                        },
                        new
                        {
                            Id = new Guid("91d40ded-33b2-4bf9-b581-cb09b540adcb"),
                            Description = "Professional"
                        });
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_tblTask_Id");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("tblTask", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1434daa7-992d-46d2-a1fe-1a9d179003b6"),
                            Date = new DateTime(2025, 1, 10, 15, 31, 15, 739, DateTimeKind.Local).AddTicks(6381),
                            Description = "Read and complete exercises in Chapter 1 of the textbook.",
                            MilestoneId = new Guid("62ea32fe-999a-4fcb-b1b2-2085d0d771ed"),
                            TagId = new Guid("5156f3ff-3c74-49d1-b31d-721a95904a8a"),
                            Title = "Complete Chapter 1",
                            UserId = new Guid("50f69577-1294-4f71-8d6f-f9bbefe61362")
                        },
                        new
                        {
                            Id = new Guid("ff05e37d-eda0-4814-9a54-f0c35af932cb"),
                            Date = new DateTime(2025, 1, 17, 15, 31, 15, 739, DateTimeKind.Local).AddTicks(6422),
                            Description = "Write a review of the latest book read.",
                            MilestoneId = new Guid("389e02b4-7cac-48e7-a184-153f67939b45"),
                            TagId = new Guid("91d40ded-33b2-4bf9-b581-cb09b540adcb"),
                            Title = "Write Book Review",
                            UserId = new Guid("6631f186-d6ed-4cd2-a7d4-2d6bcc35f714")
                        });
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(28)
                        .IsUnicode(false)
                        .HasColumnType("varchar(28)");

                    b.HasKey("Id")
                        .HasName("PK_tblUser_Id");

                    b.ToTable("tblUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("50f69577-1294-4f71-8d6f-f9bbefe61362"),
                            Email = "smarin@sample.com",
                            FirstName = "Steve",
                            LastName = "Marin",
                            Password = "pYfdnNb8sO0FgS4H0MRSwLGOIME="
                        },
                        new
                        {
                            Id = new Guid("6631f186-d6ed-4cd2-a7d4-2d6bcc35f714"),
                            Email = "Gerald@sample.com",
                            FirstName = "Gerald",
                            LastName = "Vallejos",
                            Password = "pYfdnNb8sO0FgS4H0MRSwLGOIME="
                        });
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblGoal", b =>
                {
                    b.HasOne("AimHigh.PL.Entities.tblUser", "User")
                        .WithMany("tblGoals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblGoal_tblUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblMilestone", b =>
                {
                    b.HasOne("AimHigh.PL.Entities.tblGoal", "Goal")
                        .WithMany("tblMilestones")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblMilestone_tblGoal");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblTask", b =>
                {
                    b.HasOne("AimHigh.PL.Entities.tblMilestone", "Milestone")
                        .WithMany("tblTasks")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblTask_tblMilestone");

                    b.HasOne("AimHigh.PL.Entities.tblTag", "Tag")
                        .WithMany("tblTasks")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AimHigh.PL.Entities.tblUser", "User")
                        .WithMany("tblTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_tblTask_tblUser");

                    b.Navigation("Milestone");

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblGoal", b =>
                {
                    b.Navigation("tblMilestones");
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblMilestone", b =>
                {
                    b.Navigation("tblTasks");
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblTag", b =>
                {
                    b.Navigation("tblTasks");
                });

            modelBuilder.Entity("AimHigh.PL.Entities.tblUser", b =>
                {
                    b.Navigation("tblGoals");

                    b.Navigation("tblTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
